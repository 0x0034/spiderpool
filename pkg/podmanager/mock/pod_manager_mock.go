// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: pod_manager.go

// Package mock_podmanager is a generated GoMock package.
package mock_podmanager

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spidernet-io/spiderpool/pkg/types"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockPodManager is a mock of PodManager interface.
type MockPodManager struct {
	ctrl     *gomock.Controller
	recorder *MockPodManagerMockRecorder
}

// MockPodManagerMockRecorder is the mock recorder for MockPodManager.
type MockPodManagerMockRecorder struct {
	mock *MockPodManager
}

// NewMockPodManager creates a new mock instance.
func NewMockPodManager(ctrl *gomock.Controller) *MockPodManager {
	mock := &MockPodManager{ctrl: ctrl}
	mock.recorder = &MockPodManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodManager) EXPECT() *MockPodManagerMockRecorder {
	return m.recorder
}

// GetPodByName mocks base method.
func (m *MockPodManager) GetPodByName(ctx context.Context, namespace, podName string) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByName", ctx, namespace, podName)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodByName indicates an expected call of GetPodByName.
func (mr *MockPodManagerMockRecorder) GetPodByName(ctx, namespace, podName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByName", reflect.TypeOf((*MockPodManager)(nil).GetPodByName), ctx, namespace, podName)
}

// GetPodTopController mocks base method.
func (m *MockPodManager) GetPodTopController(ctx context.Context, pod *v1.Pod) (types.PodTopController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodTopController", ctx, pod)
	ret0, _ := ret[0].(types.PodTopController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodTopController indicates an expected call of GetPodTopController.
func (mr *MockPodManagerMockRecorder) GetPodTopController(ctx, pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodTopController", reflect.TypeOf((*MockPodManager)(nil).GetPodTopController), ctx, pod)
}

// ListPods mocks base method.
func (m *MockPodManager) ListPods(ctx context.Context, opts ...client.ListOption) (*v1.PodList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPods", varargs...)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPods indicates an expected call of ListPods.
func (mr *MockPodManagerMockRecorder) ListPods(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPods", reflect.TypeOf((*MockPodManager)(nil).ListPods), varargs...)
}

// MatchLabelSelector mocks base method.
func (m *MockPodManager) MatchLabelSelector(ctx context.Context, namespace, podName string, labelSelector *v10.LabelSelector) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchLabelSelector", ctx, namespace, podName, labelSelector)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchLabelSelector indicates an expected call of MatchLabelSelector.
func (mr *MockPodManagerMockRecorder) MatchLabelSelector(ctx, namespace, podName, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchLabelSelector", reflect.TypeOf((*MockPodManager)(nil).MatchLabelSelector), ctx, namespace, podName, labelSelector)
}

// MergeAnnotations mocks base method.
func (m *MockPodManager) MergeAnnotations(ctx context.Context, namespace, podName string, annotations map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeAnnotations", ctx, namespace, podName, annotations)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeAnnotations indicates an expected call of MergeAnnotations.
func (mr *MockPodManagerMockRecorder) MergeAnnotations(ctx, namespace, podName, annotations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeAnnotations", reflect.TypeOf((*MockPodManager)(nil).MergeAnnotations), ctx, namespace, podName, annotations)
}
