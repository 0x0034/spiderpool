// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: ./ippool_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/spidernet-io/spiderpool/api/v1/agent/models"
	v1 "github.com/spidernet-io/spiderpool/pkg/k8s/apis/spiderpool.spidernet.io/v1"
	types "github.com/spidernet-io/spiderpool/pkg/types"
	v10 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockIPPoolManager is a mock of IPPoolManager interface.
type MockIPPoolManager struct {
	ctrl     *gomock.Controller
	recorder *MockIPPoolManagerMockRecorder
}

// MockIPPoolManagerMockRecorder is the mock recorder for MockIPPoolManager.
type MockIPPoolManagerMockRecorder struct {
	mock *MockIPPoolManager
}

// NewMockIPPoolManager creates a new mock instance.
func NewMockIPPoolManager(ctrl *gomock.Controller) *MockIPPoolManager {
	mock := &MockIPPoolManager{ctrl: ctrl}
	mock.recorder = &MockIPPoolManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPPoolManager) EXPECT() *MockIPPoolManagerMockRecorder {
	return m.recorder
}

// AllocateIP mocks base method.
func (m *MockIPPoolManager) AllocateIP(ctx context.Context, poolName, containerID, nic string, pod *v10.Pod, podController types.PodTopController) (*models.IPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateIP", ctx, poolName, containerID, nic, pod, podController)
	ret0, _ := ret[0].(*models.IPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIP indicates an expected call of AllocateIP.
func (mr *MockIPPoolManagerMockRecorder) AllocateIP(ctx, poolName, containerID, nic, pod, podController interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIP", reflect.TypeOf((*MockIPPoolManager)(nil).AllocateIP), ctx, poolName, containerID, nic, pod, podController)
}

// DeleteAllIPPools mocks base method.
func (m *MockIPPoolManager) DeleteAllIPPools(ctx context.Context, pool *v1.SpiderIPPool, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, pool}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllIPPools", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllIPPools indicates an expected call of DeleteAllIPPools.
func (mr *MockIPPoolManagerMockRecorder) DeleteAllIPPools(ctx, pool interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, pool}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllIPPools", reflect.TypeOf((*MockIPPoolManager)(nil).DeleteAllIPPools), varargs...)
}

// GetIPPoolByName mocks base method.
func (m *MockIPPoolManager) GetIPPoolByName(ctx context.Context, poolName string) (*v1.SpiderIPPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPPoolByName", ctx, poolName)
	ret0, _ := ret[0].(*v1.SpiderIPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPPoolByName indicates an expected call of GetIPPoolByName.
func (mr *MockIPPoolManagerMockRecorder) GetIPPoolByName(ctx, poolName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPPoolByName", reflect.TypeOf((*MockIPPoolManager)(nil).GetIPPoolByName), ctx, poolName)
}

// ListIPPools mocks base method.
func (m *MockIPPoolManager) ListIPPools(ctx context.Context, opts ...client.ListOption) (*v1.SpiderIPPoolList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIPPools", varargs...)
	ret0, _ := ret[0].(*v1.SpiderIPPoolList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIPPools indicates an expected call of ListIPPools.
func (mr *MockIPPoolManagerMockRecorder) ListIPPools(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIPPools", reflect.TypeOf((*MockIPPoolManager)(nil).ListIPPools), varargs...)
}

// ReleaseIP mocks base method.
func (m *MockIPPoolManager) ReleaseIP(ctx context.Context, poolName string, ipAndCIDs []types.IPAndCID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseIP", ctx, poolName, ipAndCIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseIP indicates an expected call of ReleaseIP.
func (mr *MockIPPoolManagerMockRecorder) ReleaseIP(ctx, poolName, ipAndCIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIP", reflect.TypeOf((*MockIPPoolManager)(nil).ReleaseIP), ctx, poolName, ipAndCIDs)
}

// UpdateAllocatedIPs mocks base method.
func (m *MockIPPoolManager) UpdateAllocatedIPs(ctx context.Context, poolName string, ipAndCIDs []types.IPAndCID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllocatedIPs", ctx, poolName, ipAndCIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllocatedIPs indicates an expected call of UpdateAllocatedIPs.
func (mr *MockIPPoolManagerMockRecorder) UpdateAllocatedIPs(ctx, poolName, ipAndCIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllocatedIPs", reflect.TypeOf((*MockIPPoolManager)(nil).UpdateAllocatedIPs), ctx, poolName, ipAndCIDs)
}

// UpdateDesiredIPNumber mocks base method.
func (m *MockIPPoolManager) UpdateDesiredIPNumber(ctx context.Context, pool *v1.SpiderIPPool, ipNum int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDesiredIPNumber", ctx, pool, ipNum)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDesiredIPNumber indicates an expected call of UpdateDesiredIPNumber.
func (mr *MockIPPoolManagerMockRecorder) UpdateDesiredIPNumber(ctx, pool, ipNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDesiredIPNumber", reflect.TypeOf((*MockIPPoolManager)(nil).UpdateDesiredIPNumber), ctx, pool, ipNum)
}
